# -*- coding: utf-8 -*-
"""Untitled22.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1caT5NiTgs4Lpb-zJjUnceYzvaHDUEZMN
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv1D, LSTM, Dense
from tensorflow.keras.optimizers import Adam

# Load  dataset
data = pd.read_csv('/content/^NSEI (2).csv')

# Data preprocessing
data['Date'] = pd.to_datetime(data['Date'])
data.set_index('Date', inplace=True)
data = data[['Close']]

# Normalize the data
scaler = MinMaxScaler()
data_scaled = scaler.fit_transform(data)

# Split the dataset into training and testing sets
train_size = int(len(data_scaled) * 0.8)
train_data = data_scaled[:train_size]
test_data = data_scaled[train_size:]

# Create sequences for training
def create_sequences(data, seq_length):
    sequences = []
    for i in range(len(data) - seq_length):
        sequence = data[i:i+seq_length]
        target = data[i+seq_length:i+seq_length+1]
        sequences.append((sequence, target))
    return np.array(sequences)

seq_length = 10  # You can adjust this sequence length
train_sequences = create_sequences(train_data, seq_length)
test_sequences = create_sequences(test_data, seq_length)

X_train, y_train = train_sequences[:, 0], train_sequences[:, 1]
X_test, y_test = test_sequences[:, 0], test_sequences[:, 1]

# Convert NumPy arrays to TensorFlow tensors
X_train = tf.convert_to_tensor(np.stack(X_train, axis=0), dtype=tf.float32)
y_train = tf.convert_to_tensor(np.stack(y_train, axis=0), dtype=tf.float32)
X_test = tf.convert_to_tensor(np.stack(X_test, axis=0), dtype=tf.float32)
y_test = tf.convert_to_tensor(np.stack(y_test, axis=0), dtype=tf.float32)

# Build the CNN-LSTM model
model = Sequential()
model.add(Conv1D(filters=64, kernel_size=3, activation='relu', input_shape=(seq_length, 1)))
model.add(LSTM(50, activation='relu'))
model.add(Dense(1))
model.compile(optimizer=Adam(learning_rate=0.001), loss='mse')

# Train the model
model.fit(X_train, y_train, epochs=50, batch_size=64, validation_data=(X_test, y_test))

# Evaluate the model
loss = model.evaluate(X_test, y_test)
print(f'Test loss: {loss}')

# Make predictions
predictions = model.predict(X_test)
predictions = scaler.inverse_transform(predictions)

# Reshape y_test to be a 2D tensor
y_test = tf.reshape(y_test, [-1, 1])

# Inverse transform the reshaped y_test
y_test = scaler.inverse_transform(y_test)

# Visualize the results
plt.figure(figsize=(12, 6))
plt.plot(data.index[-len(y_test):], y_test, label='True Stock Price', color='blue')
plt.plot(data.index[-len(predictions):], predictions, label='Predicted Stock Price', color='red')
plt.xlabel('Date')
plt.ylabel('Stock Price')
plt.title('Stock Price Forecasting')
plt.legend()
plt.show()